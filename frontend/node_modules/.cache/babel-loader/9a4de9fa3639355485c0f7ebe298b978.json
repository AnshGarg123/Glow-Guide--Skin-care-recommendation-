{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Ansh Garg\\\\Downloads\\\\skincare project\\\\skincare\\\\frontend\\\\src\\\\views\\\\FaceDetails.jsx\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { useLocation, useNavigate } from 'react-router-dom';\nimport Button from '@mui/material/Button';\nimport Container from '@mui/material/Container';\nimport Typography from '@mui/material/Typography';\nimport { putForm } from '../controllers/actions';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst allFeatures = [\"normal\", \"dry\", \"oily\", \"combination\", \"acne\", \"sensitive\", \"fine lines\", \"wrinkles\", \"redness\", \"dull\", \"pore\", \"pigmentation\", \"blackheads\", \"whiteheads\", \"blemishes\", \"dark circles\", \"eye bags\", \"dark spots\"];\nconst toneDescriptions = {\n  1: \"Very Fair\",\n  2: \"Fair\",\n  3: \"Light\",\n  4: \"Medium\",\n  5: \"Tan\",\n  6: \"Deep\"\n};\nconst mainTypes = [\"normal\", \"dry\", \"oily\", \"combination\"];\n\nconst FaceDetails = () => {\n  _s();\n\n  const {\n    state\n  } = useLocation();\n  const navigate = useNavigate();\n  const data = (state === null || state === void 0 ? void 0 : state.data) || {}; // Build features vector for recommendations\n\n  const features = {};\n  allFeatures.forEach(f => {\n    features[f] = 0;\n  });\n\n  if (data.type && features.hasOwnProperty(data.type.toLowerCase())) {\n    features[data.type.toLowerCase()] = 1;\n  }\n\n  if (data.acne !== \"Low\") features[\"acne\"] = 1; // Find all detected main skin types\n\n  const detectedTypes = Object.entries(data.features || {}).filter(_ref => {\n    let [k, v] = _ref;\n    return mainTypes.includes(k) && v === 1;\n  }).map(_ref2 => {\n    let [k] = _ref2;\n    return k.charAt(0).toUpperCase() + k.slice(1);\n  });\n  const skinTypeSentence = detectedTypes.length > 1 ? `Combination (${detectedTypes.join(\", \")})` : detectedTypes[0] || data.type; // Find all other detected features\n\n  const otherConcerns = Object.entries(data.features || {}).filter(_ref3 => {\n    let [k, v] = _ref3;\n    return v === 1 && !mainTypes.includes(k) && k !== \"acne\";\n  }).map(_ref4 => {\n    let [k] = _ref4;\n    return k.replace(/_/g, ' ').replace(/\\b\\w/g, l => l.toUpperCase());\n  });\n\n  const handleRecommend = () => {\n    putForm(features, data.type, data.tone, navigate);\n  };\n\n  return /*#__PURE__*/_jsxDEV(Container, {\n    maxWidth: \"sm\",\n    sx: {\n      mt: 6\n    },\n    children: [/*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"h4\",\n      gutterBottom: true,\n      children: \"Face Analysis Results\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"body1\",\n      sx: {\n        mb: 2\n      },\n      children: data.type && data.tone && data.acne ? /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [\"Your skin type is \", /*#__PURE__*/_jsxDEV(\"b\", {\n          children: skinTypeSentence\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 31\n        }, this), \".\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 57\n        }, this), \"Your skin tone is \", /*#__PURE__*/_jsxDEV(\"b\", {\n          children: toneDescriptions[data.tone] || data.tone\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 31\n        }, this), \" \", toneDescriptions[data.tone] ? /*#__PURE__*/_jsxDEV(\"span\", {\n          style: {\n            color: '#888'\n          },\n          children: [\"(Tone \", data.tone, \")\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 112\n        }, this) : null, \".\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 175\n        }, this), \"Acne severity detected: \", /*#__PURE__*/_jsxDEV(\"b\", {\n          children: data.acne\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 37\n        }, this), \".\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 56\n        }, this), otherConcerns.length > 0 && /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 66,\n            columnNumber: 17\n          }, this), \"Other detected skin concerns:\", /*#__PURE__*/_jsxDEV(\"ul\", {\n            children: otherConcerns.map(concern => /*#__PURE__*/_jsxDEV(\"li\", {\n              children: concern\n            }, concern, false, {\n              fileName: _jsxFileName,\n              lineNumber: 69,\n              columnNumber: 21\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 67,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true)]\n      }, void 0, true) : \"Could not detect all face details.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      variant: \"contained\",\n      color: \"primary\",\n      onClick: handleRecommend,\n      children: \"Get Recommendations\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 5\n  }, this);\n};\n\n_s(FaceDetails, \"swtv2cUIBi1p5TRCrVajRailzpM=\", false, function () {\n  return [useLocation, useNavigate];\n});\n\n_c = FaceDetails;\nexport default FaceDetails;\n\nvar _c;\n\n$RefreshReg$(_c, \"FaceDetails\");","map":{"version":3,"sources":["C:/Users/Ansh Garg/Downloads/skincare project/skincare/frontend/src/views/FaceDetails.jsx"],"names":["React","useLocation","useNavigate","Button","Container","Typography","putForm","allFeatures","toneDescriptions","mainTypes","FaceDetails","state","navigate","data","features","forEach","f","type","hasOwnProperty","toLowerCase","acne","detectedTypes","Object","entries","filter","k","v","includes","map","charAt","toUpperCase","slice","skinTypeSentence","length","join","otherConcerns","replace","l","handleRecommend","tone","mt","mb","color","concern"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { useLocation, useNavigate } from 'react-router-dom';\r\nimport Button from '@mui/material/Button';\r\nimport Container from '@mui/material/Container';\r\nimport Typography from '@mui/material/Typography';\r\n\r\nimport { putForm } from '../controllers/actions';\r\n\r\nconst allFeatures = [\r\n  \"normal\", \"dry\", \"oily\", \"combination\", \"acne\", \"sensitive\", \"fine lines\", \"wrinkles\", \"redness\",\r\n  \"dull\", \"pore\", \"pigmentation\", \"blackheads\", \"whiteheads\", \"blemishes\", \"dark circles\", \"eye bags\", \"dark spots\"\r\n];\r\n\r\nconst toneDescriptions = {\r\n  1: \"Very Fair\",\r\n  2: \"Fair\",\r\n  3: \"Light\",\r\n  4: \"Medium\",\r\n  5: \"Tan\",\r\n  6: \"Deep\"\r\n};\r\n\r\nconst mainTypes = [\"normal\", \"dry\", \"oily\", \"combination\"];\r\n\r\nconst FaceDetails = () => {\r\n  const { state } = useLocation();\r\n  const navigate = useNavigate();\r\n  const data = state?.data || {};\r\n\r\n  // Build features vector for recommendations\r\n  const features = {};\r\n  allFeatures.forEach(f => { features[f] = 0; });\r\n  if (data.type && features.hasOwnProperty(data.type.toLowerCase())) {\r\n    features[data.type.toLowerCase()] = 1;\r\n  }\r\n  if (data.acne !== \"Low\") features[\"acne\"] = 1;\r\n\r\n  // Find all detected main skin types\r\n  const detectedTypes = Object.entries(data.features || {})\r\n    .filter(([k, v]) => mainTypes.includes(k) && v === 1)\r\n    .map(([k]) => k.charAt(0).toUpperCase() + k.slice(1));\r\n  const skinTypeSentence = detectedTypes.length > 1\r\n    ? `Combination (${detectedTypes.join(\", \")})`\r\n    : detectedTypes[0] || data.type;\r\n\r\n  // Find all other detected features\r\n  const otherConcerns = Object.entries(data.features || {})\r\n    .filter(([k, v]) => v === 1 && !mainTypes.includes(k) && k !== \"acne\")\r\n    .map(([k]) => k.replace(/_/g, ' ').replace(/\\b\\w/g, l => l.toUpperCase()));\r\n\r\n  const handleRecommend = () => {\r\n    putForm(features, data.type, data.tone, navigate);\r\n  };\r\n\r\n  return (\r\n    <Container maxWidth=\"sm\" sx={{ mt: 6 }}>\r\n      <Typography variant=\"h4\" gutterBottom>Face Analysis Results</Typography>\r\n      <Typography variant=\"body1\" sx={{ mb: 2 }}>\r\n        {data.type && data.tone && data.acne ? (\r\n          <>\r\n            Your skin type is <b>{skinTypeSentence}</b>.<br/>\r\n            Your skin tone is <b>{toneDescriptions[data.tone] || data.tone}</b> {toneDescriptions[data.tone] ? <span style={{color:'#888'}}>(Tone {data.tone})</span> : null}.<br/>\r\n            Acne severity detected: <b>{data.acne}</b>.<br/>\r\n            {otherConcerns.length > 0 && (\r\n              <>\r\n                <br/>Other detected skin concerns:\r\n                <ul>\r\n                  {otherConcerns.map((concern) => (\r\n                    <li key={concern}>{concern}</li>\r\n                  ))}\r\n                </ul>\r\n              </>\r\n            )}\r\n          </>\r\n        ) : (\r\n          \"Could not detect all face details.\"\r\n        )}\r\n      </Typography>\r\n      <Button variant=\"contained\" color=\"primary\" onClick={handleRecommend}>\r\n        Get Recommendations\r\n      </Button>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default FaceDetails; "]},"metadata":{},"sourceType":"module"}