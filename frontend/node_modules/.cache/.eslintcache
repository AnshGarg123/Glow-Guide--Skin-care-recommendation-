[{"C:\\Users\\Ansh Garg\\Downloads\\skincare project\\skincare\\frontend\\src\\index.js":"1","C:\\Users\\Ansh Garg\\Downloads\\skincare project\\skincare\\frontend\\src\\App.js":"2","C:\\Users\\Ansh Garg\\Downloads\\skincare project\\skincare\\frontend\\src\\views\\DailyTips.js":"3","C:\\Users\\Ansh Garg\\Downloads\\skincare project\\skincare\\frontend\\src\\views\\imageInput.jsx":"4","C:\\Users\\Ansh Garg\\Downloads\\skincare project\\skincare\\frontend\\src\\views\\Recommendations.jsx":"5","C:\\Users\\Ansh Garg\\Downloads\\skincare project\\skincare\\frontend\\src\\views\\ProgressTracker.jsx":"6","C:\\Users\\Ansh Garg\\Downloads\\skincare project\\skincare\\frontend\\src\\views\\Form.jsx":"7","C:\\Users\\Ansh Garg\\Downloads\\skincare project\\skincare\\frontend\\src\\views\\RoutineBuilder.jsx":"8","C:\\Users\\Ansh Garg\\Downloads\\skincare project\\skincare\\frontend\\src\\controllers\\actions.js":"9","C:\\Users\\Ansh Garg\\Downloads\\skincare project\\skincare\\frontend\\src\\views\\Components\\webCam.jsx":"10","C:\\Users\\Ansh Garg\\Downloads\\skincare project\\skincare\\frontend\\src\\views\\Components\\ProductCard.jsx":"11","C:\\Users\\Ansh Garg\\Downloads\\skincare project\\skincare\\frontend\\src\\views\\FaceDetails.jsx":"12"},{"size":197,"mtime":1740158448146,"results":"13","hashOfConfig":"14"},{"size":3588,"mtime":1746570552331,"results":"15","hashOfConfig":"14"},{"size":4288,"mtime":1746558225532,"results":"16","hashOfConfig":"14"},{"size":3653,"mtime":1746568005663,"results":"17","hashOfConfig":"14"},{"size":4862,"mtime":1740158448375,"results":"18","hashOfConfig":"14"},{"size":6695,"mtime":1746558617890,"results":"19","hashOfConfig":"14"},{"size":8729,"mtime":1740158448321,"results":"20","hashOfConfig":"14"},{"size":10463,"mtime":1746558642513,"results":"21","hashOfConfig":"14"},{"size":1197,"mtime":1746599969229,"results":"22","hashOfConfig":"14"},{"size":5013,"mtime":1740158448550,"results":"23","hashOfConfig":"14"},{"size":2344,"mtime":1740158448495,"results":"24","hashOfConfig":"14"},{"size":3455,"mtime":1746571064073,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"183etp2",{"filePath":"29","messages":"30","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"31","messages":"32","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33","usedDeprecatedRules":"28"},{"filePath":"34","messages":"35","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"36","messages":"37","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38","usedDeprecatedRules":"28"},{"filePath":"39","messages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"28"},{"filePath":"42","messages":"43","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44","usedDeprecatedRules":"28"},{"filePath":"45","messages":"46","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"28"},{"filePath":"48","messages":"49","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"50","messages":"51","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"28"},{"filePath":"53","messages":"54","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"28"},{"filePath":"56","messages":"57","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"C:\\Users\\Ansh Garg\\Downloads\\skincare project\\skincare\\frontend\\src\\index.js",[],["58","59"],"C:\\Users\\Ansh Garg\\Downloads\\skincare project\\skincare\\frontend\\src\\App.js",[],"C:\\Users\\Ansh Garg\\Downloads\\skincare project\\skincare\\frontend\\src\\views\\DailyTips.js",["60","61","62","63","64"],"import React, { useState, useEffect } from 'react';\r\nimport {\r\n  Box,\r\n  Card,\r\n  CardContent,\r\n  Typography,\r\n  Grid,\r\n  Chip,\r\n  CircularProgress,\r\n  Paper,\r\n  Divider,\r\n  List,\r\n  ListItem,\r\n  ListItemIcon,\r\n  ListItemText,\r\n} from '@mui/material';\r\nimport {\r\n  WbSunny,\r\n  LocalDrink,\r\n  Face,\r\n  Spa,\r\n  Restaurant,\r\n  DirectionsRun,\r\n} from '@mui/icons-material';\r\n\r\nconst DailyTips = () => {\r\n  const [loading, setLoading] = useState(true);\r\n  const [tips, setTips] = useState({\r\n    morning: [\r\n      { title: 'Cleanse', description: 'Use a gentle cleanser to remove overnight buildup' },\r\n      { title: 'Tone', description: 'Apply a pH-balancing toner to prepare skin for products' },\r\n      { title: 'Moisturize', description: 'Hydrate with a lightweight moisturizer' },\r\n      { title: 'Protect', description: 'Apply broad-spectrum SPF 30+ sunscreen' },\r\n    ],\r\n    evening: [\r\n      { title: 'Double Cleanse', description: 'Remove makeup and impurities thoroughly' },\r\n      { title: 'Treat', description: 'Apply targeted treatments for specific concerns' },\r\n      { title: 'Hydrate', description: 'Use a richer moisturizer for overnight repair' },\r\n    ],\r\n    lifestyle: [\r\n      { title: 'Stay Hydrated', description: 'Drink 8 glasses of water daily' },\r\n      { title: 'Healthy Diet', description: 'Include antioxidant-rich foods' },\r\n      { title: 'Exercise', description: 'Regular physical activity improves circulation' },\r\n      { title: 'Sleep Well', description: 'Aim for 7-8 hours of quality sleep' },\r\n    ],\r\n  });\r\n\r\n  useEffect(() => {\r\n    // Simulate loading\r\n    setTimeout(() => {\r\n      setLoading(false);\r\n    }, 1000);\r\n  }, []);\r\n\r\n  if (loading) {\r\n    return (\r\n      <Box display=\"flex\" justifyContent=\"center\" alignItems=\"center\" minHeight=\"60vh\">\r\n        <CircularProgress />\r\n      </Box>\r\n    );\r\n  }\r\n\r\n  const TipCard = ({ title, items, icon }) => (\r\n    <Card className=\"hover-card\" sx={{ height: '100%' }}>\r\n      <CardContent>\r\n        <Box display=\"flex\" alignItems=\"center\" mb={2}>\r\n          {icon}\r\n          <Typography variant=\"h6\" component=\"div\" ml={1}>\r\n            {title}\r\n          </Typography>\r\n        </Box>\r\n        <List>\r\n          {items.map((item, index) => (\r\n            <React.Fragment key={index}>\r\n              <ListItem>\r\n                <ListItemText\r\n                  primary={item.title}\r\n                  secondary={item.description}\r\n                />\r\n              </ListItem>\r\n              {index < items.length - 1 && <Divider />}\r\n            </React.Fragment>\r\n          ))}\r\n        </List>\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n\r\n  return (\r\n    <Box className=\"fade-in\">\r\n      <Typography variant=\"h4\" gutterBottom>\r\n        Your Daily Skincare Guide\r\n      </Typography>\r\n      <Typography variant=\"subtitle1\" color=\"text.secondary\" paragraph>\r\n        Follow these recommendations for healthy, glowing skin\r\n      </Typography>\r\n\r\n      <Grid container spacing={3} sx={{ mt: 2 }}>\r\n        <Grid item xs={12} md={4}>\r\n          <TipCard\r\n            title=\"Morning Routine\"\r\n            items={tips.morning}\r\n            icon={<WbSunny color=\"primary\" />}\r\n          />\r\n        </Grid>\r\n        <Grid item xs={12} md={4}>\r\n          <TipCard\r\n            title=\"Evening Routine\"\r\n            items={tips.evening}\r\n            icon={<Face color=\"secondary\" />}\r\n          />\r\n        </Grid>\r\n        <Grid item xs={12} md={4}>\r\n          <TipCard\r\n            title=\"Lifestyle Tips\"\r\n            items={tips.lifestyle}\r\n            icon={<Spa color=\"success\" />}\r\n          />\r\n        </Grid>\r\n      </Grid>\r\n\r\n      <Paper sx={{ mt: 4, p: 3 }} className=\"hover-card\">\r\n        <Typography variant=\"h6\" gutterBottom>\r\n          Today's Special Focus: Acne Prevention\r\n        </Typography>\r\n        <Typography variant=\"body1\" paragraph>\r\n          • Keep your hands away from your face throughout the day\r\n          • Use non-comedogenic products\r\n          • Change pillowcases weekly\r\n          • Avoid touching or picking at blemishes\r\n        </Typography>\r\n        <Chip\r\n          label=\"Track Progress\"\r\n          color=\"primary\"\r\n          variant=\"outlined\"\r\n          sx={{ mt: 2 }}\r\n        />\r\n      </Paper>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default DailyTips; ","C:\\Users\\Ansh Garg\\Downloads\\skincare project\\skincare\\frontend\\src\\views\\imageInput.jsx",[],"C:\\Users\\Ansh Garg\\Downloads\\skincare project\\skincare\\frontend\\src\\views\\Recommendations.jsx",["65","66","67"],"import React, { useState, useEffect } from 'react';\n\n// MUI\nimport Container from '@mui/material/Container';\nimport Grid from '@mui/material/Grid';\nimport FormLabel from '@mui/material/FormLabel';\nimport Typography from '@mui/material/Typography';\n\nimport ProductCard from './Components/ProductCard'\nimport { useLocation } from 'react-router';\n\n\n\n// {'face-moisturisers': [{'brand': 'azani active care',\n//    'name': 'unisex acne rescue cream - 30 ml',\n//    'price': '₹ 399',\n//    'url': 'https://www.myntra.com/face-moisturisers/azani-active-care/azani-active-care-unisex-acne-rescue-cream---30-ml/15322518/buy',\n//    'skin type': 'all',\n//    'concern': ['deep nourishment', 'acne', 'blemishes', 'dull skin']},\n\nconst Products = {\n    \n    skinCare:\n    {\n        'face-moisturisers':\n            [{\n                'brand': 'azani active care',\n                'name': 'unisex acne rescue cream - 30 ml',\n                'price': '₹ 399',\n                'url': 'https://www.myntra.com/face-moisturisers/azani-active-care/azani-active-care-unisex-acne-rescue-cream---30-ml/15322518/buy',\n                'skin type': 'all',\n                'concern': ['deep nourishment', 'acne', 'blemishes', 'dull skin']\n            },\n            {\n                'brand': 'mamaearth',\n                'name': 'vitamin c face milk with peach for skin illumination 100 ml',\n                'price': '₹ 404',\n                'url': 'https://www.myntra.com/face-moisturisers/mamaearth/mamaearth-vitamin-c-face-milk-with-peach-for-skin-illumination-100-ml/12411986/buy',\n                'skin type': 'all',\n                'concern': ['acne', 'blemishes', 'pigmentation', 'dull skin']\n            }]\n    },\n    makeUp:\n    {\n        'foundations':\n            [{\n                'brand': 'wet n wild',\n                'name': 'sustainable photo focus matte face primer - partners in prime',\n                'price': '₹ 454',\n                'url': 'https://www.myntra.com/foundation-and-primer/wet-n-wild/wet-n-wild-sustainable-photo-focus-matte-face-primer---partners-in-prime/12045988/buy',\n                'skin type': 'normal',\n                'skin tone': 'light to medium'\n            },\n            {\n                'brand': 'faces canada',\n                'name': 'ultime pro makeup fixer',\n                'price': '₹ 486',\n                'url': 'https://www.myntra.com/foundation-and-primer/faces-canada/faces-canada-ultime-pro-makeup-fixer/2421530/buy',\n                'skin type': 'normal',\n                'skin tone': 'light to medium'\n            }]\n    }\n}\n\n\nconst Recommendations = () => {\n    const {state} = useLocation();\n    const {data} = state; \n    const {general, makeup} = data;\n    return <>\n        <Container sx={{ marginTop: \"2vh\", padding: 1 }} alignitems=\"center\" width=\"inherit\">\n            <Typography gutterBottom variant=\"h4\" component=\"div\" marginTop=\"2vh\" textAlign=\"center\">\n                Skin care\n            </Typography>\n            {Object.keys(general).map((type, products) => {\n                return (<div><Typography gutterBottom variant=\"h5\" component=\"div\" marginTop=\"2vh\" color=\"text.secondary\">\n                            {type}\n                        </Typography>\n                        <Grid container spacing={1}>\n                    {general[type].slice(0,4).map((prod) => {\n                        return <Grid item xs={6} md={3}>\n                            <ProductCard\n                                name={prod.name}\n                                brand={prod.brand}\n                                image={prod.img}\n                                price={prod.price}\n                                url={prod.url}\n                                concern={prod.concern} />\n                        </Grid>\n                    })}\n                </Grid></div>)\n            })}\n\n            <Typography gutterBottom variant=\"h4\" component=\"div\" marginTop=\"2vh\" textAlign=\"center\">\n                Make up\n            </Typography>\n\n            <FormLabel component=\"legend\">{ }</FormLabel>\n            {/* {Object.keys(Products.makeUp).map((type, products)=>{\n            return (<div><FormLabel component=\"legend\">{type}</FormLabel><Grid container spacing={1}> */}\n            <div>\n            <Grid container spacing={1}>\n            {makeup.map((prod) => {\n                return <Grid item xs={6} md={3}>\n                    <ProductCard\n                        name={prod.name}\n                        brand={prod.brand}\n                        image={prod.img}\n                        price={prod.price}\n                        url={prod.url}\n                        concern={prod.concern} />\n                </Grid>\n            })}\n             </Grid></div>\n            {/* </Grid></div>) */}\n            {/* // })} */}\n        </Container>\n    </>\n};\n\nexport default Recommendations;","C:\\Users\\Ansh Garg\\Downloads\\skincare project\\skincare\\frontend\\src\\views\\ProgressTracker.jsx",["68","69","70"],"import React, { useState } from 'react';\r\nimport {\r\n  Box,\r\n  Typography,\r\n  Grid,\r\n  Card,\r\n  CardContent,\r\n  Button,\r\n  IconButton,\r\n  Dialog,\r\n  DialogTitle,\r\n  DialogContent,\r\n  DialogActions,\r\n  TextField,\r\n  Chip,\r\n  Paper,\r\n} from '@mui/material';\r\nimport {\r\n  AddPhotoAlternate,\r\n  CompareArrows,\r\n  Delete,\r\n  CalendarToday,\r\n} from '@mui/icons-material';\r\n\r\nconst ProgressTracker = () => {\r\n  const [entries, setEntries] = useState([]);\r\n  const [openDialog, setOpenDialog] = useState(false);\r\n  const [currentEntry, setCurrentEntry] = useState({\r\n    date: new Date().toISOString().split('T')[0],\r\n    notes: '',\r\n    beforeImage: null,\r\n    afterImage: null,\r\n  });\r\n\r\n  const handleImageUpload = (type) => (event) => {\r\n    const file = event.target.files[0];\r\n    if (file) {\r\n      const reader = new FileReader();\r\n      reader.onloadend = () => {\r\n        setCurrentEntry(prev => ({\r\n          ...prev,\r\n          [type]: reader.result\r\n        }));\r\n      };\r\n      reader.readAsDataURL(file);\r\n    }\r\n  };\r\n\r\n  const handleAddEntry = () => {\r\n    if (currentEntry.beforeImage && currentEntry.afterImage) {\r\n      setEntries(prev => [...prev, { ...currentEntry, id: Date.now() }]);\r\n      setCurrentEntry({\r\n        date: new Date().toISOString().split('T')[0],\r\n        notes: '',\r\n        beforeImage: null,\r\n        afterImage: null,\r\n      });\r\n      setOpenDialog(false);\r\n    }\r\n  };\r\n\r\n  const handleDeleteEntry = (id) => {\r\n    setEntries(prev => prev.filter(entry => entry.id !== id));\r\n  };\r\n\r\n  return (\r\n    <Box className=\"fade-in\" sx={{ p: 3 }}>\r\n      <Typography variant=\"h4\" gutterBottom>\r\n        Progress Tracker\r\n      </Typography>\r\n      <Typography variant=\"subtitle1\" color=\"text.secondary\" paragraph>\r\n        Track your skincare journey with before and after photos\r\n      </Typography>\r\n\r\n      <Button\r\n        variant=\"contained\"\r\n        startIcon={<AddPhotoAlternate />}\r\n        onClick={() => setOpenDialog(true)}\r\n        sx={{ mb: 4 }}\r\n      >\r\n        Add New Progress Entry\r\n      </Button>\r\n\r\n      <Grid container spacing={3}>\r\n        {entries.map((entry) => (\r\n          <Grid item xs={12} md={6} key={entry.id}>\r\n            <Card className=\"hover-card\">\r\n              <CardContent>\r\n                <Box sx={{ display: 'flex', justifyContent: 'space-between', mb: 2 }}>\r\n                  <Typography variant=\"h6\">\r\n                    {new Date(entry.date).toLocaleDateString()}\r\n                  </Typography>\r\n                  <IconButton onClick={() => handleDeleteEntry(entry.id)}>\r\n                    <Delete />\r\n                  </IconButton>\r\n                </Box>\r\n                <Grid container spacing={2}>\r\n                  <Grid item xs={6}>\r\n                    <Typography variant=\"subtitle2\" gutterBottom>Before</Typography>\r\n                    <img\r\n                      src={entry.beforeImage}\r\n                      alt=\"Before\"\r\n                      style={{ width: '100%', borderRadius: '8px' }}\r\n                    />\r\n                  </Grid>\r\n                  <Grid item xs={6}>\r\n                    <Typography variant=\"subtitle2\" gutterBottom>After</Typography>\r\n                    <img\r\n                      src={entry.afterImage}\r\n                      alt=\"After\"\r\n                      style={{ width: '100%', borderRadius: '8px' }}\r\n                    />\r\n                  </Grid>\r\n                </Grid>\r\n                {entry.notes && (\r\n                  <Paper sx={{ p: 2, mt: 2 }}>\r\n                    <Typography variant=\"body2\">{entry.notes}</Typography>\r\n                  </Paper>\r\n                )}\r\n              </CardContent>\r\n            </Card>\r\n          </Grid>\r\n        ))}\r\n      </Grid>\r\n\r\n      <Dialog open={openDialog} onClose={() => setOpenDialog(false)} maxWidth=\"md\" fullWidth>\r\n        <DialogTitle>Add Progress Entry</DialogTitle>\r\n        <DialogContent>\r\n          <Box sx={{ mt: 2 }}>\r\n            <TextField\r\n              type=\"date\"\r\n              label=\"Date\"\r\n              value={currentEntry.date}\r\n              onChange={(e) => setCurrentEntry(prev => ({ ...prev, date: e.target.value }))}\r\n              fullWidth\r\n              sx={{ mb: 2 }}\r\n            />\r\n            <Grid container spacing={2}>\r\n              <Grid item xs={6}>\r\n                <Button\r\n                  variant=\"outlined\"\r\n                  component=\"label\"\r\n                  fullWidth\r\n                  startIcon={<AddPhotoAlternate />}\r\n                >\r\n                  Upload Before Photo\r\n                  <input\r\n                    type=\"file\"\r\n                    hidden\r\n                    accept=\"image/*\"\r\n                    onChange={handleImageUpload('beforeImage')}\r\n                  />\r\n                </Button>\r\n                {currentEntry.beforeImage && (\r\n                  <img\r\n                    src={currentEntry.beforeImage}\r\n                    alt=\"Before\"\r\n                    style={{ width: '100%', marginTop: '8px', borderRadius: '8px' }}\r\n                  />\r\n                )}\r\n              </Grid>\r\n              <Grid item xs={6}>\r\n                <Button\r\n                  variant=\"outlined\"\r\n                  component=\"label\"\r\n                  fullWidth\r\n                  startIcon={<AddPhotoAlternate />}\r\n                >\r\n                  Upload After Photo\r\n                  <input\r\n                    type=\"file\"\r\n                    hidden\r\n                    accept=\"image/*\"\r\n                    onChange={handleImageUpload('afterImage')}\r\n                  />\r\n                </Button>\r\n                {currentEntry.afterImage && (\r\n                  <img\r\n                    src={currentEntry.afterImage}\r\n                    alt=\"After\"\r\n                    style={{ width: '100%', marginTop: '8px', borderRadius: '8px' }}\r\n                  />\r\n                )}\r\n              </Grid>\r\n            </Grid>\r\n            <TextField\r\n              label=\"Notes\"\r\n              multiline\r\n              rows={4}\r\n              value={currentEntry.notes}\r\n              onChange={(e) => setCurrentEntry(prev => ({ ...prev, notes: e.target.value }))}\r\n              fullWidth\r\n              sx={{ mt: 2 }}\r\n            />\r\n          </Box>\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={() => setOpenDialog(false)}>Cancel</Button>\r\n          <Button\r\n            onClick={handleAddEntry}\r\n            variant=\"contained\"\r\n            disabled={!currentEntry.beforeImage || !currentEntry.afterImage}\r\n          >\r\n            Save Entry\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default ProgressTracker; ","C:\\Users\\Ansh Garg\\Downloads\\skincare project\\skincare\\frontend\\src\\views\\Form.jsx",["71","72"],"import React, { useState, useRef} from \"react\";\nimport {useNavigate} from 'react-router-dom';\n\n// MUI\nimport Container from '@mui/material/Container';\nimport Grid from '@mui/material/Grid';\nimport Radio from '@mui/material/Radio';\nimport RadioGroup from '@mui/material/RadioGroup';\nimport FormControlLabel from '@mui/material/FormControlLabel';\nimport FormControl from '@mui/material/FormControl';\nimport FormLabel from '@mui/material/FormLabel';\nimport Checkbox from '@mui/material/Checkbox';\nimport Button from '@mui/material/Button';\nimport Typography from '@mui/material/Typography';\nimport InputLabel from '@mui/material/InputLabel';\nimport MenuItem from '@mui/material/MenuItem';\nimport Select from '@mui/material/Select';\n\n// controllers\nimport { putForm } from '../controllers/actions'\nimport { useLocation } from 'react-router';\n\nconst skinToneValues = [1, 2, 3, 4, 5, 6]\nconst skinToneColors = [\"rgb(249, 245, 236)\",\n    \"rgb(250, 245, 234)\",\n    \"rgb(240, 227, 171)\",\n    \"rgb(206, 172, 104)\",\n    \"rgb(105, 59, 41)\",\n    \"rgb(33, 28, 40)\",\n]\nlet data = {\n    tone: 5,\n    type: \"Oily\",\n    acne: \"Moderate\"\n}\nconst skinTypes = [\"All\", \"Oily\", \"Normal\", \"Dry\"]\nconst acnes = ['Low', 'Moderate', 'Severe']\nconst otherConcerns = ['sensitive', 'fine lines', 'wrinkles', 'redness', 'pore', 'pigmentation', 'blackheads', 'whiteheads', 'blemishes', 'dark circles', 'eye bags', 'dark spots']\n\nconst Form = () => {\n    \n    const {state} = useLocation();\n    if(state !== null) {\n        data = state.data; \n        console.log(data)\n    }\n    console.log(\"After the condtional : \", data)\n    const {type, tone, acne} = data;\n    console.log(\"Prefill : \", type, tone, acne)\n\n    const [currType, setCurrType] = useState(type)\n    const [currTone, setCurrTone] = useState(parseInt(tone))\n    const [currAcne, setAcne] = useState(acne)\n    const [features, setFeatures] = useState({\n        \"normal\": false, \"dry\": false, \"oily\": false, \"combination\": false,\n        \"acne\": false, \"sensitive\": false, \"fine lines\": false, \"wrinkles\": false,\n        \"redness\": false, \"dull\": false, \"pore\": false, \"pigmentation\": false,\n        \"blackheads\": false, \"whiteheads\": false, \"blemishes\": false, \"dark circles\": false,\n        \"eye bags\": false, \"dark spots\": false\n    });\n    const handleChange = (event) => {\n        setFeatures({\n            ...features,\n            [event.target.name]: event.target.checked,\n        });\n        console.log(features)\n    };\n    const handleTone = (e) => {\n        setCurrTone(e.target.value)\n    }\n\n    const handleType = (e) => {\n        setCurrType(e.target.value)\n    }\n\n    const handleAcne = (e) => {\n        setAcne(e.target.value)\n    }\n    const navigate = useNavigate()\n    const handleSubmit = () => {\n        if (currType === 'All') {\n            features['normal'] = true;\n            features['dry'] = true;\n            features['oily'] = true;\n            features['combination'] = true;\n\n        }\n        else {\n            features[currType.toLowerCase()] = true;\n        }\n        if (currAcne != \"Low\") {\n            features['acne'] = true;\n        }\n        for (const [key, value] of Object.entries(features)) {\n            if (value === true) {\n                features[key] = 1;\n            }\n            else {\n                features[key] = 0;\n            }\n        }\n        console.log({\"features\": features, \"type\":currType, \"tone\":currTone})\n        putForm(features, currType, currTone, navigate)\n    }\n\n    return (\n        <>\n            <Container maxWidth=\"xs\" sx={{ marginTop: \"2vh\" }} alignitems=\"center\" width=\"inherit\">\n                <Typography variant=\"h5\" component=\"div\" textAlign=\"center\">\n                    Results\n                </Typography>\n                {/* \n            <FormControl fullWidth>\n            </FormControl> */}\n\n                <FormControl component=\"fieldset\" sx={{ marginTop: \"3vh\" }}>\n                    <Grid container>\n                        <Grid item xs={9}>\n                            <InputLabel id=\"demo-simple-select-label\">Tone</InputLabel>\n                            <Select\n                                labelId=\"demo-simple-select-label\"\n                                id=\"demo-simple-select\"\n                                value={currTone}\n                                label=\"Age\"\n                                onChange={handleTone}\n                                fullWidth\n                                defaultValue={tone}>\n                                {skinToneValues.map((value) => {\n                                    return (<MenuItem value={value}>{value}</MenuItem>)\n                                })}\n                            </Select>\n                        </Grid>\n                        <Grid item xs={3}>\n                            <div\n                                style={{\n                                    height: \"3rem\",\n                                    width: \"3rem\",\n                                    backgroundColor: skinToneColors[tone-1],\n                                    margin: \"0 auto\",\n                                    justifySelf: \"center\",\n                                    borderRadius: \"10%\",\n                                }}></div>\n                        </Grid>\n                    </Grid>\n                    <Grid marginTop=\"2vh\">\n                        <FormLabel component=\"legend\">Type</FormLabel>\n                        <RadioGroup\n                            row\n                            name=\"row-radio-buttons-group\"\n                            defaultValue={type}\n                            onChange={handleType}\n                            value={currType}>\n                            <Grid container>\n                                {skinTypes.map((type) => {\n                                    return (\n                                        <Grid item xs={6}>\n                                            <FormControlLabel\n                                                value={type}\n                                                control={<Radio />}\n                                                label={type} />\n                                        </Grid>)\n                                })}\n                            </Grid>\n                        </RadioGroup>\n                    </Grid>\n\n                    <Grid marginTop=\"2vh\">\n                        <FormLabel component=\"legend\">Acne</FormLabel>\n                        <RadioGroup\n                            row\n                            name=\"row-radio-buttons-group\"\n                            onChange={handleAcne}\n                            defaultValue={acne}\n                            value={currAcne}>\n\n                            <Grid container>\n                                {acnes.map((ac) => {\n                                    return (\n                                        <Grid item >\n                                            <FormControlLabel\n                                                value={ac}\n                                                control={<Radio />}\n                                                label={ac} />\n                                        </Grid>)\n                                })}\n                            </Grid>\n                        </RadioGroup>\n                    </Grid>\n\n                    <Grid marginTop=\"2vh\">\n                        {/* <Typography variant=\"h6\" component=\"div\" textAlign=\"center\">\n                    Specify other skin concerns\n            </Typography> */}\n                        <FormLabel component=\"legend\">Specify other skin concerns</FormLabel>\n                        <Grid container>\n                            {otherConcerns.map((concern) => {\n                                return (\n                                    <Grid item xs={6}>\n                                        <FormControlLabel control={<Checkbox checked={features[concern]} onChange={handleChange} name={concern} />}\n                                            value={concern}\n                                            label={concern.charAt(0).toUpperCase() + concern.slice(1)} />\n                                    </Grid>)\n                            })}\n                        </Grid>\n                    </Grid>\n\n                    <Grid marginTop=\"2vh\" item xs={12}>\n                        <Button\n                            onClick={handleSubmit}\n                            variant=\"contained\"\n                            fullWidth>\n                            Submit\n                        </Button>\n                    </Grid>\n                </FormControl>\n            </Container>\n        </>\n    )\n}\n\n\n\n\nexport default Form;\n","C:\\Users\\Ansh Garg\\Downloads\\skincare project\\skincare\\frontend\\src\\views\\RoutineBuilder.jsx",["73","74","75","76"],"import React, { useState } from 'react';\r\nimport {\r\n  Box,\r\n  Typography,\r\n  Grid,\r\n  Card,\r\n  CardContent,\r\n  Button,\r\n  IconButton,\r\n  Dialog,\r\n  DialogTitle,\r\n  DialogContent,\r\n  DialogActions,\r\n  TextField,\r\n  Chip,\r\n  Paper,\r\n  List,\r\n  ListItem,\r\n  ListItemText,\r\n  ListItemSecondaryAction,\r\n  Switch,\r\n  FormControlLabel,\r\n  Select,\r\n  MenuItem,\r\n  InputLabel,\r\n  FormControl,\r\n} from '@mui/material';\r\nimport {\r\n  Add,\r\n  Delete,\r\n  Edit,\r\n  AccessTime,\r\n  CheckCircle,\r\n  Cancel,\r\n  Favorite,\r\n  Notifications,\r\n} from '@mui/icons-material';\r\n\r\nconst RoutineBuilder = () => {\r\n  const [routines, setRoutines] = useState([]);\r\n  const [products, setProducts] = useState([]);\r\n  const [openProductDialog, setOpenProductDialog] = useState(false);\r\n  const [openRoutineDialog, setOpenRoutineDialog] = useState(false);\r\n  const [currentProduct, setCurrentProduct] = useState({\r\n    name: '',\r\n    category: '',\r\n    frequency: 'daily',\r\n    timeOfDay: 'morning',\r\n    status: 'tried',\r\n    reminder: false,\r\n  });\r\n  const [currentRoutine, setCurrentRoutine] = useState({\r\n    name: '',\r\n    products: [],\r\n    schedule: [],\r\n  });\r\n\r\n  const handleAddProduct = () => {\r\n    if (currentProduct.name && currentProduct.category) {\r\n      setProducts(prev => [...prev, { ...currentProduct, id: Date.now() }]);\r\n      setCurrentProduct({\r\n        name: '',\r\n        category: '',\r\n        frequency: 'daily',\r\n        timeOfDay: 'morning',\r\n        status: 'tried',\r\n        reminder: false,\r\n      });\r\n      setOpenProductDialog(false);\r\n    }\r\n  };\r\n\r\n  const handleAddRoutine = () => {\r\n    if (currentRoutine.name && currentRoutine.products.length > 0) {\r\n      setRoutines(prev => [...prev, { ...currentRoutine, id: Date.now() }]);\r\n      setCurrentRoutine({\r\n        name: '',\r\n        products: [],\r\n        schedule: [],\r\n      });\r\n      setOpenRoutineDialog(false);\r\n    }\r\n  };\r\n\r\n  const getStatusColor = (status) => {\r\n    switch (status) {\r\n      case 'liked': return 'success';\r\n      case 'avoid': return 'error';\r\n      default: return 'default';\r\n    }\r\n  };\r\n\r\n  const getStatusIcon = (status) => {\r\n    switch (status) {\r\n      case 'liked': return <Favorite />;\r\n      case 'avoid': return <Cancel />;\r\n      default: return <CheckCircle />;\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Box className=\"fade-in\" sx={{ p: 3 }}>\r\n      <Typography variant=\"h4\" gutterBottom>\r\n        Routine Builder\r\n      </Typography>\r\n      <Typography variant=\"subtitle1\" color=\"text.secondary\" paragraph>\r\n        Create and manage your personalized skincare routine\r\n      </Typography>\r\n\r\n      <Grid container spacing={3}>\r\n        <Grid item xs={12} md={6}>\r\n          <Card className=\"hover-card\">\r\n            <CardContent>\r\n              <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 2 }}>\r\n                <Typography variant=\"h6\">Your Products</Typography>\r\n                <Button\r\n                  variant=\"contained\"\r\n                  startIcon={<Add />}\r\n                  onClick={() => setOpenProductDialog(true)}\r\n                >\r\n                  Add Product\r\n                </Button>\r\n              </Box>\r\n              <List>\r\n                {products.map((product) => (\r\n                  <ListItem key={product.id}>\r\n                    <ListItemText\r\n                      primary={product.name}\r\n                      secondary={`${product.category} • ${product.frequency} • ${product.timeOfDay}`}\r\n                    />\r\n                    <ListItemSecondaryAction>\r\n                      <Chip\r\n                        icon={getStatusIcon(product.status)}\r\n                        label={product.status}\r\n                        color={getStatusColor(product.status)}\r\n                        size=\"small\"\r\n                        sx={{ mr: 1 }}\r\n                      />\r\n                      <IconButton edge=\"end\" onClick={() => {}}>\r\n                        <Edit />\r\n                      </IconButton>\r\n                    </ListItemSecondaryAction>\r\n                  </ListItem>\r\n                ))}\r\n              </List>\r\n            </CardContent>\r\n          </Card>\r\n        </Grid>\r\n\r\n        <Grid item xs={12} md={6}>\r\n          <Card className=\"hover-card\">\r\n            <CardContent>\r\n              <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 2 }}>\r\n                <Typography variant=\"h6\">Your Routines</Typography>\r\n                <Button\r\n                  variant=\"contained\"\r\n                  startIcon={<Add />}\r\n                  onClick={() => setOpenRoutineDialog(true)}\r\n                >\r\n                  Create Routine\r\n                </Button>\r\n              </Box>\r\n              <List>\r\n                {routines.map((routine) => (\r\n                  <ListItem key={routine.id}>\r\n                    <ListItemText\r\n                      primary={routine.name}\r\n                      secondary={`${routine.products.length} products • ${routine.schedule.length} scheduled times`}\r\n                    />\r\n                    <ListItemSecondaryAction>\r\n                      <IconButton edge=\"end\" onClick={() => {}}>\r\n                        <Edit />\r\n                      </IconButton>\r\n                    </ListItemSecondaryAction>\r\n                  </ListItem>\r\n                ))}\r\n              </List>\r\n            </CardContent>\r\n          </Card>\r\n        </Grid>\r\n      </Grid>\r\n\r\n      {/* Add Product Dialog */}\r\n      <Dialog open={openProductDialog} onClose={() => setOpenProductDialog(false)}>\r\n        <DialogTitle>Add New Product</DialogTitle>\r\n        <DialogContent>\r\n          <Box sx={{ mt: 2 }}>\r\n            <TextField\r\n              label=\"Product Name\"\r\n              value={currentProduct.name}\r\n              onChange={(e) => setCurrentProduct(prev => ({ ...prev, name: e.target.value }))}\r\n              fullWidth\r\n              sx={{ mb: 2 }}\r\n            />\r\n            <TextField\r\n              label=\"Category\"\r\n              value={currentProduct.category}\r\n              onChange={(e) => setCurrentProduct(prev => ({ ...prev, category: e.target.value }))}\r\n              fullWidth\r\n              sx={{ mb: 2 }}\r\n            />\r\n            <FormControl fullWidth sx={{ mb: 2 }}>\r\n              <InputLabel>Frequency</InputLabel>\r\n              <Select\r\n                value={currentProduct.frequency}\r\n                onChange={(e) => setCurrentProduct(prev => ({ ...prev, frequency: e.target.value }))}\r\n                label=\"Frequency\"\r\n              >\r\n                <MenuItem value=\"daily\">Daily</MenuItem>\r\n                <MenuItem value=\"weekly\">Weekly</MenuItem>\r\n                <MenuItem value=\"biweekly\">Bi-weekly</MenuItem>\r\n                <MenuItem value=\"monthly\">Monthly</MenuItem>\r\n              </Select>\r\n            </FormControl>\r\n            <FormControl fullWidth sx={{ mb: 2 }}>\r\n              <InputLabel>Time of Day</InputLabel>\r\n              <Select\r\n                value={currentProduct.timeOfDay}\r\n                onChange={(e) => setCurrentProduct(prev => ({ ...prev, timeOfDay: e.target.value }))}\r\n                label=\"Time of Day\"\r\n              >\r\n                <MenuItem value=\"morning\">Morning</MenuItem>\r\n                <MenuItem value=\"evening\">Evening</MenuItem>\r\n                <MenuItem value=\"both\">Both</MenuItem>\r\n              </Select>\r\n            </FormControl>\r\n            <FormControl fullWidth sx={{ mb: 2 }}>\r\n              <InputLabel>Status</InputLabel>\r\n              <Select\r\n                value={currentProduct.status}\r\n                onChange={(e) => setCurrentProduct(prev => ({ ...prev, status: e.target.value }))}\r\n                label=\"Status\"\r\n              >\r\n                <MenuItem value=\"tried\">Tried</MenuItem>\r\n                <MenuItem value=\"liked\">Liked</MenuItem>\r\n                <MenuItem value=\"avoid\">Avoid</MenuItem>\r\n              </Select>\r\n            </FormControl>\r\n            <FormControlLabel\r\n              control={\r\n                <Switch\r\n                  checked={currentProduct.reminder}\r\n                  onChange={(e) => setCurrentProduct(prev => ({ ...prev, reminder: e.target.checked }))}\r\n                />\r\n              }\r\n              label=\"Set Reminder\"\r\n            />\r\n          </Box>\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={() => setOpenProductDialog(false)}>Cancel</Button>\r\n          <Button onClick={handleAddProduct} variant=\"contained\">\r\n            Add Product\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n\r\n      {/* Create Routine Dialog */}\r\n      <Dialog open={openRoutineDialog} onClose={() => setOpenRoutineDialog(false)} maxWidth=\"md\" fullWidth>\r\n        <DialogTitle>Create New Routine</DialogTitle>\r\n        <DialogContent>\r\n          <Box sx={{ mt: 2 }}>\r\n            <TextField\r\n              label=\"Routine Name\"\r\n              value={currentRoutine.name}\r\n              onChange={(e) => setCurrentRoutine(prev => ({ ...prev, name: e.target.value }))}\r\n              fullWidth\r\n              sx={{ mb: 2 }}\r\n            />\r\n            <Typography variant=\"subtitle1\" gutterBottom>\r\n              Select Products\r\n            </Typography>\r\n            <List>\r\n              {products.map((product) => (\r\n                <ListItem key={product.id}>\r\n                  <FormControlLabel\r\n                    control={\r\n                      <Switch\r\n                        checked={currentRoutine.products.includes(product.id)}\r\n                        onChange={(e) => {\r\n                          const newProducts = e.target.checked\r\n                            ? [...currentRoutine.products, product.id]\r\n                            : currentRoutine.products.filter(id => id !== product.id);\r\n                          setCurrentRoutine(prev => ({ ...prev, products: newProducts }));\r\n                        }}\r\n                      />\r\n                    }\r\n                    label={product.name}\r\n                  />\r\n                </ListItem>\r\n              ))}\r\n            </List>\r\n          </Box>\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={() => setOpenRoutineDialog(false)}>Cancel</Button>\r\n          <Button onClick={handleAddRoutine} variant=\"contained\">\r\n            Create Routine\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default RoutineBuilder; ","C:\\Users\\Ansh Garg\\Downloads\\skincare project\\skincare\\frontend\\src\\controllers\\actions.js",[],"C:\\Users\\Ansh Garg\\Downloads\\skincare project\\skincare\\frontend\\src\\views\\Components\\webCam.jsx",["77"],"import React, { useRef, useCallback, useState, useEffect } from \"react\";\nimport Webcam from \"react-webcam\";\nimport * as faceapi from 'face-api.js';\n\n// MUI\nimport Button from '@mui/material/Button';\nimport Grid from '@mui/material/Grid';\nimport Typography from '@mui/material/Typography';\n\nfunction getWindowDimensions() {\n    const { innerWidth: width, innerHeight: height } = window;\n    return {\n        width,\n        height\n    };\n}\n\nconst aspectRatio = 4 / 3;\nconst thresholdPercentFace = 0.3;\nconst thresholdFaceScore = 0.7;\n\nfunction useWindowDimensions() {\n    const [windowDimensions, setWindowDimensions] = useState(getWindowDimensions());\n\n    useEffect(() => {\n        function handleResize() {\n            setWindowDimensions(getWindowDimensions());\n        }\n        window.addEventListener('resize', handleResize);\n        return () => window.removeEventListener('resize', handleResize);\n    }, []);\n\n    return windowDimensions;\n}\n\nconst WebcamCapture = ({ setImageSrc, setOnPlay, onPlay }) => {\n    let camHeight = useWindowDimensions().height\n    let camWidth = useWindowDimensions().width\n    if (camHeight > camWidth) {\n        camHeight = Math.round(camWidth * aspectRatio)\n    } else {\n        camHeight = Math.round(camHeight * 0.9)\n        camWidth = Math.round(camHeight / aspectRatio)\n    }\n    const videoConstraints = {\n        height: camHeight,\n        width: camWidth,\n        facingMode: \"user\"\n    };\n\n    // useEffect( () =>\n    //     {\n    //         console.log(videoConstraints.height)\n    //         console.log(videoConstraints.width)\n    //     }, [videoConstraints.height, videoConstraints.width]\n    // )\n    const webcamRef = useRef(null);\n    const capture = useCallback(\n        () => {\n            const imageSrc = webcamRef.current.getScreenshot();\n            console.log(imageSrc)\n            setImageSrc(imageSrc)\n        }, [webcamRef]\n    );\n\n    const [initialising, setInitialising] = useState(false)\n    useEffect(() => {\n        const loadModels = async () => {\n            const MODEL_URI = process.env.PUBLIC_URL + '/models';\n            setInitialising(true)\n            Promise.all([\n                faceapi.nets.tinyFaceDetector.loadFromUri(MODEL_URI),\n                // faceapi.nets.faceLandmark68Net.loadFromUri(MODEL_URI),\n                // faceapi.nets.faceRecognitionNet.loadFromUri(MODEL_URI),\n                // faceapi.nets.faceExpressionNet.loadFromUri(MODEL_URI),\n            ]).then(() => { console.log(\"models imported\") });\n        }\n        loadModels();\n    }, [])\n\n\n\n    const [faceOK, setFaceOK] = useState(null)\n    const handleVideoOnPlay = () => {\n        setInterval(async () => {\n            if (initialising) {\n                setInitialising(false)\n            }\n            let detections = []\n            if(webcamRef.current !== null)\n                detections = await faceapi.detectAllFaces(webcamRef.current.video, new faceapi.TinyFaceDetectorOptions());\n            if (detections.length > 1) {\n                // Multiple faces\n                setFaceOK(\"Multiple faces detected\")\n            }\n            else if (detections[0] !== undefined) {\n                // One face\n                const boxArea = Math.round(detections[0].box.height) * Math.round(detections[0].box.width)\n                const ImageArea = detections[0].imageWidth * detections[0].imageHeight\n                const percentFace = boxArea / ImageArea\n\n                if (percentFace < thresholdPercentFace) {\n                    // Not close enough\n                    setFaceOK(\"Come closer\")\n                } else if (detections[0].score < thresholdFaceScore) {\n                    // detected face score is low\n                    setFaceOK(\"Blurry or Not enough lighting\")\n                } else {\n                    // all conditions satisfied\n                    setFaceOK(\"OK\")\n                }\n            }\n            else {\n                // No face\n                setFaceOK(\"no face detected\")\n            }\n        }, 500)\n    }\n\n    return (\n        <>\n            <Grid item>\n                <Typography variant=\"h5\" component=\"div\" textAlign=\"center\">\n                    {initialising ? \"Initialising...\" : faceOK}\n                </Typography>\n                <Webcam\n                    id=\"webcam\"\n                    audio={false}\n                    height={videoConstraints.height}\n                    width={videoConstraints.width}\n                    ref={webcamRef}\n                    screenshotFormat=\"image/jpeg\"\n                    videoConstraints={videoConstraints}\n                    onUserMedia={handleVideoOnPlay} />\n            </Grid>\n            <Grid item xs={12}>\n                <Button\n                    onClick={capture}\n                    variant=\"contained\"\n                    disabled={(initialising) || (faceOK !== \"OK\")}\n                    fullWidth>\n                    Capture photo\n                </Button>\n            </Grid>\n        </>\n    );\n};\n\nexport default WebcamCapture","C:\\Users\\Ansh Garg\\Downloads\\skincare project\\skincare\\frontend\\src\\views\\Components\\ProductCard.jsx",["78","79","80"],"import React,{ useState } from 'react';\nimport Card from '@mui/material/Card';\nimport CardContent from '@mui/material/CardContent';\nimport CardMedia from '@mui/material/CardMedia';\nimport Typography from '@mui/material/Typography';\nimport Box from '@mui/material/Box';\nimport Grid from '@mui/material/Grid';\n\nconst unavailableImage = process.env.PUBLIC_URL+'./unavailable.png'\n\nexport default function ProductCard({name=\"cream\", price=2000, brand=\"brand\", url=\"https://www.myntra.com/\", concern=[], image = ''}) {\n    const redirectProduct = () => {\n        window.location.replace(url);\n    }\n    concern = [...new Set(concern)]\n    return (  \n        <Box onClick={redirectProduct} sx={{lineHeight:\"low\"}}>\n            <Card sx={{ maxWidth: \"50vw\" }}>\n            <CardMedia\n                component=\"img\"\n                height=\"200vh\"\n                image={image}\n                alt=\"Product image\"\n                />\n            <CardContent>\n                <Typography variant=\"body2\" color=\"text.secondary\" gutterBottom>\n                    {brand}\n                    <Typography component=\"div\" color=\"text.primary\" variant=\"inline\" sx={{float: \"right\", fontWeight:\"bold\"}}>\n                        {price}\n                    </Typography>\n                </Typography>\n                <Typography gutterBottom variant=\"h6\" component=\"div\">\n                {name.length > 40 ? name.substring(0, 40)+\"...\" : name}\n                </Typography>\n                <Grid container>\n                    {concern.filter(n => n).map((concern) => {\n                        return <Grid item xs={12}><Typography \n                                    variant=\"body2\" \n                                    color=\"white\" \n                                    variant=\"inline\" \n                                    backgroundColor=\"info.main\"\n                                    borderRadius=\"5%\"\n                                    paddingLeft=\"2%\"\n                                    paddingRight=\"2%\"\n                                    paddingTop=\"1%\"\n                                    paddingBottom=\"1%\"\n                                    marginRight=\"2%\"\n                                    >{concern}</Typography></Grid>\n                    })}\n                </Grid>\n            </CardContent>\n            </Card>\n        </Box>\n    );\n}","C:\\Users\\Ansh Garg\\Downloads\\skincare project\\skincare\\frontend\\src\\views\\FaceDetails.jsx",[],{"ruleId":"81","replacedBy":"82"},{"ruleId":"83","replacedBy":"84"},{"ruleId":"85","severity":1,"message":"86","line":14,"column":3,"nodeType":"87","messageId":"88","endLine":14,"endColumn":15},{"ruleId":"85","severity":1,"message":"89","line":19,"column":3,"nodeType":"87","messageId":"88","endLine":19,"endColumn":13},{"ruleId":"85","severity":1,"message":"90","line":22,"column":3,"nodeType":"87","messageId":"88","endLine":22,"endColumn":13},{"ruleId":"85","severity":1,"message":"91","line":23,"column":3,"nodeType":"87","messageId":"88","endLine":23,"endColumn":16},{"ruleId":"85","severity":1,"message":"92","line":28,"column":16,"nodeType":"87","messageId":"88","endLine":28,"endColumn":23},{"ruleId":"85","severity":1,"message":"93","line":1,"column":17,"nodeType":"87","messageId":"88","endLine":1,"endColumn":25},{"ruleId":"85","severity":1,"message":"94","line":1,"column":27,"nodeType":"87","messageId":"88","endLine":1,"endColumn":36},{"ruleId":"85","severity":1,"message":"95","line":21,"column":7,"nodeType":"87","messageId":"88","endLine":21,"endColumn":15},{"ruleId":"85","severity":1,"message":"96","line":15,"column":3,"nodeType":"87","messageId":"88","endLine":15,"endColumn":7},{"ruleId":"85","severity":1,"message":"97","line":20,"column":3,"nodeType":"87","messageId":"88","endLine":20,"endColumn":16},{"ruleId":"85","severity":1,"message":"98","line":22,"column":3,"nodeType":"87","messageId":"88","endLine":22,"endColumn":16},{"ruleId":"85","severity":1,"message":"99","line":1,"column":27,"nodeType":"87","messageId":"88","endLine":1,"endColumn":33},{"ruleId":"100","severity":1,"message":"101","line":91,"column":22,"nodeType":"102","messageId":"103","endLine":91,"endColumn":24},{"ruleId":"85","severity":1,"message":"104","line":16,"column":3,"nodeType":"87","messageId":"88","endLine":16,"endColumn":8},{"ruleId":"85","severity":1,"message":"105","line":30,"column":3,"nodeType":"87","messageId":"88","endLine":30,"endColumn":9},{"ruleId":"85","severity":1,"message":"106","line":32,"column":3,"nodeType":"87","messageId":"88","endLine":32,"endColumn":13},{"ruleId":"85","severity":1,"message":"107","line":36,"column":3,"nodeType":"87","messageId":"88","endLine":36,"endColumn":16},{"ruleId":"108","severity":1,"message":"109","line":63,"column":12,"nodeType":"110","endLine":63,"endColumn":23,"suggestions":"111"},{"ruleId":"85","severity":1,"message":"93","line":1,"column":16,"nodeType":"87","messageId":"88","endLine":1,"endColumn":24},{"ruleId":"85","severity":1,"message":"112","line":9,"column":7,"nodeType":"87","messageId":"88","endLine":9,"endColumn":23},{"ruleId":"113","severity":1,"message":"114","line":40,"column":37,"nodeType":"115","messageId":"116","endLine":40,"endColumn":53},"no-native-reassign",["117"],"no-negated-in-lhs",["118"],"no-unused-vars","'ListItemIcon' is defined but never used.","Identifier","unusedVar","'LocalDrink' is defined but never used.","'Restaurant' is defined but never used.","'DirectionsRun' is defined but never used.","'setTips' is assigned a value but never used.","'useState' is defined but never used.","'useEffect' is defined but never used.","'Products' is assigned a value but never used.","'Chip' is defined but never used.","'CompareArrows' is defined but never used.","'CalendarToday' is defined but never used.","'useRef' is defined but never used.","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","'Paper' is defined but never used.","'Delete' is defined but never used.","'AccessTime' is defined but never used.","'Notifications' is defined but never used.","react-hooks/exhaustive-deps","React Hook useCallback has a missing dependency: 'setImageSrc'. Either include it or remove the dependency array. If 'setImageSrc' changes too often, find the parent component that defines it and wrap that definition in useCallback.","ArrayExpression",["119"],"'unavailableImage' is assigned a value but never used.","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","noDuplicateProps","no-global-assign","no-unsafe-negation",{"desc":"120","fix":"121"},"Update the dependencies array to be: [setImageSrc]",{"range":"122","text":"123"},[1877,1888],"[setImageSrc]"]